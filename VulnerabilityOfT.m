function [ Vk, Vc ] = VulnerabilityOfT(t)
% Gets the vulnerability of the transformed system.
%
% @param t = [t1, t2, t3] {float} The parameters representing 
%   transformation T
% @data sysp.mat {ss} The state-space representation of the plant
% @data sysk.mat {ss} The state-space representation of the original 
%   controller to be transformed by T
%
% @returns Vc {float} The maximum vulnerability seen by any link in the 
%   combined system.
% @returns Vk {float} The maximum vulnerability seen by links from the 
%   controller portion of the combined system.
%
% @author Nathan Woodbury

load('sysp.mat');
load('sysk.mat');

% If t_3 is 0, let the vulnerability be Inf
if t(3) == 0
    Vc = Inf;
    Vk = Inf;
    return;
end

[An, Bn] = GetTransformedSystem(t(1), t(2), t(3), sysk.A, sysk.B);
Cn = sysk.C;

% Determine if the transformed system is stable. If not, set vulnerability
% to infinity.
if ~all(eig(An) < 0)            
    Vc = Inf;
    Vk = Inf;
    return;
end

% Get the DSFs of the plant and controller
[Qn, Pn] = checkQP(An, Bn, Cn);
[Qt, Pt] = checkQP(sysp.A, sysp.B, sysp.C);

% Combine the systems and find the vulnerabilities
Qc = [Qn Pn ; Pt Qt];
allvs = get_vuln_mat(Qc);
Vc = max(max(allvs));
Vk = max(max(allvs(1:size(Qn,1),:)));

end

